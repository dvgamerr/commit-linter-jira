#!/usr/bin/env .venv\python
import re, sys, os

examples = """fix: navbar not responsive on mobile
JIRA-1/test: prepared test cases for user authentication
JIRA-001/chore: moved to semantic versioning
JIRA-999/feat(auth): added social login using twitter
AICP-83/feat: new feature implementation
AICP-83,AICP-85,AICP-82/fix: bug fixes for multiple tickets
"""

types = """JIRA-0/build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
JIRA-0/ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
JIRA-0/docs: Documentation only changes
JIRA-0/feat: A new feature
JIRA-0/fix: A bug fix
JIRA-0/perf: A code change that improves performance
JIRA-0/refactor: A code change that neither fixes a bug nor adds a feature
JIRA-0/style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
JIRA-0/test: Adding missing tests or correcting existing tests
AICP-0/build: Changes that affect the build system or external dependencies
AICP-0/ci: Changes to our CI configuration files and scripts
AICP-0/docs: Documentation only changes
AICP-0/feat: A new feature
AICP-0/fix: A bug fix
AICP-0/perf: A code change that improves performance
AICP-0/refactor: A code change that neither fixes a bug nor adds a feature
AICP-0/style: Changes that do not affect the meaning of the code
AICP-0/test: Adding missing tests or correcting existing tests
Multiple tickets: AICP-83,AICP-85,AICP-82/feat: description
"""


def main():
    emojies = {
        "new": ":tada:",
        "build": ":construction:",
        "ci": ":green_heart:",
        "docs": ":books:",
        "feat": ":sparkles:",
        "fix": ":bug:",
        "perf": ":racehorse:",
        "refactor": ":hammer:",
        "style": ":umbrella:",
        "test": ":heavy_check_mark:",
        "chore": ":arrow_up:",
        "revert": ":rewind:",
    }
    # Updated pattern to support both JIRA and AICP formats, including multiple AICP tickets
    pattern = r"((\w+?-\d+?(,\w+?-\d+?)*)|((\w+?-\d+?)))/(new|build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert)(\([\w\-]+\))?:\s.*"
    filename = sys.argv[1]
    ss = open(filename, "r").read()
    m = re.match(pattern, ss)
    if m == None:
        print("\nCOMMIT FAILED!")
        print(
            "\nPlease enter commit message in the conventional format and try to commit again. Examples:"
        )
        print("\n" + examples)
        print("\nCHECK COMMIT CONVENTIONS BELOW!\n" + types)
        print(
            "\nCheck the Conventional Commits at https://www.conventionalcommits.org/\n"
        )
        sys.exit(1)
    else:
        commit_prefix = ss.split(":")[0]
        commit_postfix = ss.split(":", 1)[1]
        if re.search(r":\w+?:", commit_postfix):
            sys.exit(0)
            
        if "(" in commit_prefix:
            commit_emojie = emojies.get(commit_prefix.split("(")[0].split("/")[1])
            new_commit = open(filename, "w")
            new_commit.write(commit_prefix + ": " + (commit_emojie or "") + commit_postfix)
        else:
            commit_emojie = emojies.get(commit_prefix.split("/")[1])
            new_commit = open(filename, "w")
            new_commit.write(commit_prefix + ": " + (commit_emojie or "") + commit_postfix)
    


if __name__ == "__main__":
    main()
